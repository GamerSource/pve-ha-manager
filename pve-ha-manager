#!/usr/bin/perl 

use lib '.';

use strict;
use warnings;

use PVE::Tools;
use PVE::HA::SimEnv;
use PVE::HA::NodeStatus;

my $statusdir = "/var/tmp/pve-ha-manager";

mkdir $statusdir;

my $haenv = PVE::HA::SimEnv->new($statusdir, 'node1');

my $status;

sub get_manager_status {

    my $status = $haenv->read_local_status();

    $status = 'startup' if !$status;

    return $status;
}

sub set_manager_status {
    my ($new_status) = @_;

    return if $status eq $new_status;

    $haenv->log('info', "manager status change $status => $new_status");

    $status = $new_status;

    $haenv->write_local_status($status);
}

sub get_manager_lock {

    my $count = 0;
    for (;;) {
	return 1 if $haenv->get_ha_manager_lock();
	last if ++$count > 5;
	$haenv->sleep(1);
    }

    return 0;
}

sub sleep_until {
   my ($end_time) = @_;

   for (;;) {
       my $cur_time = $haenv->get_time();
       return if $cur_time >= $end_time;
       $haenv->sleep($end_time - $cur_time);
   }
}

$status = get_manager_status();

# can happen after crash?
if ($status eq 'master') {
    set_manager_status('recover');
} else {
    set_manager_status('wait_for_quorum');   
}

$haenv->log('info', "starting simulation environment (status = $status)");

my $node_status = PVE::HA::NodeStatus->new($haenv);

eval {

    for (;;) {

	$haenv->loop_start_hook();

	if ($status eq 'recover') {

	    $haenv->log('info', "waiting for 5 seconds");
	    $haenv->sleep(5);

	    set_manager_status('wait_for_quorum');

	} elsif ($status eq 'wait_for_quorum') {

	    $haenv->sleep(5);
	   
	    if ($haenv->quorate()) {
		if (get_manager_lock()) {
		    set_manager_status('master');
		} else {
		    set_manager_status('slave');
		}
	    }

	} elsif ($status eq 'master') {

	    my $startime = $haenv->get_time();

	    my $max_time = 10;

	    # do work (max_time seconds)
	    eval {
		# print "DO WORK:$startime\n";
		# fixme: set alert timer

		my $node_info = $haenv->get_node_info();
		$node_status->update($node_info);

	    };
	    if (my $err = $@) {

		# fixme: cleanup?
		$haenv->log('err', "got unexpected error - $err");
		set_manager_status('error');

	    } else {
		sleep_until($startime + $max_time);
	    }

	    if (!get_manager_lock()) {
		if ($haenv->quorate()) {
		    set_manager_status('slave');
		} else {
		    set_manager_status('wait_for_quorum');
		    # set_manager_status('lost_quorum');
		}
	    }
	} elsif ($status eq 'slave') {

	    $haenv->sleep(5);

	    if ($haenv->quorate()) {
		if (get_manager_lock()) {
		    set_manager_status('master');
		}
	    } else {
		set_manager_status('wait_for_quorum');
	    }

	} elsif ($status eq 'error') {
	    die "stopping due to errors\n";
	} elsif ($status eq 'lost_quorum') {
	    die "lost_quorum\n";
	} elsif ($status eq 'halt') {
	    die "halt\n";
	} else {
	    die "got unexpected status '$status'\n";
	}

	$haenv->loop_end_hook();
    }
};
if (my $err = $@) {
    $haenv->log('err', "exit now (status = $status) - $err ");
} else {
    $haenv->log('info', "exit simulation environment (status = $status)");
}

exit(0);

