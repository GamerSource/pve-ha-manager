#!/usr/bin/perl 

use lib ('.', '..');

use strict;
use warnings;
use Getopt::Long;
use JSON; 

use PVE::Tools;
use PVE::HA::SimEnv;
use PVE::HA::Server;

my $testdir;

if (!GetOptions ("test=s"   => \$testdir)) {
    print "usage: $0 [--test=<dir>]\n";
    exit -1;
}

if ($testdir) {

    my $filename = "$testdir/cluster_status";

    my $raw = PVE::Tools::file_get_contents($filename);
    my $cstatus = decode_json($raw);

    my $cluster = {};
    foreach my $node (sort keys %$cstatus) {

	my $haenv = PVE::HA::SimEnv->new($testdir, $node);
	if (!$haenv->manager_status_exists()) {
	    $haenv->log('info', "HA is not enabled");
	    exit(0);
	}

	$haenv->log('info', "starting server");
	my $server = PVE::HA::Server->new($haenv);

	$cluster->{$node}->{haenv} = $haenv;
	$cluster->{$node}->{server} = $server;
    }

    eval {

	my $ctime = 0;

	for (;;) {

	    foreach my $node (sort keys %$cluster) {
		my $haenv = $cluster->{$node}->{haenv};
		my $server = $cluster->{$node}->{server};

		$haenv->loop_start_hook($ctime);

		die "implement me" if !$server->do_one_iteration();

		$haenv->loop_end_hook();

		my $simtime = $haenv->get_time();
		$ctime = $simtime if $simtime > $ctime;
	    }
	}
    };
    if (my $err = $@) {
	#$haenv->log('err', "exit server - $err ");
	print "ERROR - $err\n";
    } else {
	#$haenv->log('info', "exit server - done");
	print "exit server - done\n";
    }

    exit(0);
   
} else {
    # my $statusdir; = "/var/tmp/pve-ha-manager";
    die "implement me";
}



